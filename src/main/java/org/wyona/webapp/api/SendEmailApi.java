/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */
package org.wyona.webapp.api;

import java.io.IOException;
import java.util.List;
import javax.mail.MessagingException;
import javax.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.wyona.webapp.models.Greeting;
import org.wyona.webapp.models.LanguageEmail;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen",
    date = "2019-12-14T12:14:09.457Z[GMT]")
@Api(value = "send", description = "the send API")
public interface SendEmailApi {

  @ApiOperation(value = "Send email with attachments", nickname = "sendEmailWithAttachmentPost",
      notes = "", tags = {})
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "Successfully sent an email with attachment"),
          @ApiResponse(code = 400, message = "Bad request")})
  @RequestMapping(value = "/send", consumes = {"multipart/form-data"},
      produces = {"application/json"}, method = RequestMethod.POST)
  ResponseEntity<EmailResponse> sendEmail(@ApiParam(value = "email", required = true) String email,
      @ApiParam(value = "subject", required = false) String subject,
      @ApiParam(value = "text", required = false) String text,
      @ApiParam(value = "files", required = false) List<MultipartFile> files) throws IOException;


  @ApiOperation(value = "Send a language specific greeting to a provided email address")
  @ApiResponses(value = {@ApiResponse(code = 400, message = "Bad Request"),
      @ApiResponse(code = 200, response = String.class, message = "Email sent")})
  public ResponseEntity<LanguageEmail.Language> sendEmailWithSpecificLanguage(
      @Valid @RequestBody LanguageEmail request) throws MessagingException, IOException;



  @ApiOperation(value = "Generate greeting and send greeting as email when address specified")
  @ApiResponses(value = {@ApiResponse(code = 400,
      message = "Bad Request, e.g. provided email parameter is not valid email address")})
  public ResponseEntity<Greeting> getGreeting(
      @ApiParam(name = "email",
          value = "email address greeting will be sent to, e.g. 'michael.wechner@wyona.com'",
          required = false) @RequestParam(name = "email", required = false) String email)
      throws MessagingException, IOException;

}


